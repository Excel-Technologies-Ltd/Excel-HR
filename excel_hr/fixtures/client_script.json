[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2025-04-07 18:37:15.889364",
  "module": null,
  "name": "Custom Script for Leave Application",
  "script": "// Monthly paid leave Validation \r\nconst saturdayLocation = [\r\n\"Dhanmondi Warehouse\",\r\n\"Corporate Office\",\r\n\"Head Office\",\r\n\"CSP-IDB\",\r\n\"CSP-Sylhet\",\r\n\"CSP-Gulistan\",\r\n\"CSP-Rangpur\",\r\n\"CSP-Feni\",\r\n\"CSP-Mymensingh\",\r\n\"CSP-Rajshahi\",\r\n\"CSP-Khulna\",\r\n\"CSP-CTG\",\r\n\"CSP-Bogura\",\r\n\"CTG\",\r\n\"Gulistan Zone\",\r\n\"Bogra Zone\",\r\n\"Narayanganj Zone\",\r\n\"Khulna Zone\",\r\n\"CTG Zone\",\r\n\"Rajshahi Zone\",\r\n\"Mymensingh Zone\",\r\n\"Motijheel Zone\",\r\n\"CTG Corporate\",\r\n\"Dhanmondi Zone\",\r\n\"E. Road Zone\",\r\n\"Tangail Zone\",\r\n\"CSP-Motijheel\",\r\n\"IDB\",\r\n\"Pabna Zone\",\r\n\"Noakhali Zone\",\r\n\"Sylhet Zone\",\r\n\"Dinajpur Zone\",\r\n\"Savar Zone\",\r\n\"Kusthia Zone\",\r\n\"Barishal Zone\",\r\n\"Feni Zone\",\r\n\"Faridpur Zone\",\r\n\"CSP-Barishal\",\r\n\"Rangpur Zone\",\r\n\"Bogura Zone\",\r\n\"Comilla Zone\",\r\n\"Bangabandhu Hi-Tech City\",\r\n\"CSP-Gulistan\"\r\n  ];\r\n\r\n  const fridayLocation = [\"CSP-Uttara\", \"Multiplan\", \"Uttara\", \"CSP-Gazipur\", \"Gazipur Zone\"];\r\n  \r\n  const thursdayLocation = [\"CCSP-Multiplan\"];\r\n  \r\n  const employee = \"CCSP-Multiplan\";\r\n  \r\n  function checkLeaveDay(branch) {\r\n    let availableDays = \"\";\r\n    let dayNumber;\r\n    const isSaturday = saturdayLocation.filter((value) => value == branch);\r\n    const isFriday = fridayLocation.filter((value) => value == branch);\r\n    const isThursday = thursdayLocation.filter((value) => value == branch);\r\n    if (isSaturday.length > 0) {\r\n      availableDays = \"Saturday\";\r\n      dayNumber = 6;\r\n    }\r\n    if (isFriday.length > 0) {\r\n      availableDays = \"Friday\";\r\n      dayNumber = 5;\r\n    }\r\n    if (isThursday.length > 0) {\r\n      availableDays = \"Thursday\";\r\n      dayNumber = 4;\r\n    }\r\n    return [availableDays, dayNumber];\r\n  }\r\n\r\nfrappe.ui.form.on('Leave Application',  {\r\n    from_date : function(frm) {\r\n        console.log(frm.doc)\r\n        \r\n         let selected_date = cur_frm.doc.from_date;\r\n         let leave_type = cur_frm.doc.leave_type;\r\n         \r\n         if (leave_type){\r\n             \r\n              const date = new Date(selected_date);\r\n              console.log(date.getDay())\r\n         \r\n            if ( leave_type ===\"Monthly Paid Leave\") {\r\n                const availabeDay=checkLeaveDay(frm.doc.excel_job_location)\r\n                if(date.getDay()!=availabeDay[1]){\r\n                    msgprint(\"You can not select without \"+ availabeDay[0]);\r\n                    frm.set_df_property('to_date', 'read_only', 1);\r\n                     validated = false;\r\n                }else{\r\n                    frm.set_df_property('to_date', 'read_only', 0);\r\n                }\r\n               \r\n            }\r\n            \r\n      \r\n            \r\n      \r\n\r\n          \r\n            \r\n         }else{\r\n\r\n              msgprint('Select Leave Type First!');\r\n              cur_frm.doc.from_date='';\r\n            //   validated = false;\r\n              frm.refresh_fields(); \r\n              \r\n         }\r\n         \r\n        \r\n            \r\n        \r\n    } \r\n});\r\n\r\n// Leave day 1 validation \r\n\r\n// frappe.ui.form.on('Leave Application', {\r\n// \tleave_type: function(frm) {\r\n// \t\t// your code here\r\n// \t\tconst leave_type = cur_frm.doc.leave_type;\r\n// \t\tif (leave_type === \"Monthly Paid Leave\" && frm.doc.excel_last_total_leave_days  > 1){\r\n// \t\t    msgprint('Monthly Incentive Leave Can not be greater than 1');\r\n//             validated = false;\r\n// \t\t}\r\n// \t}\r\n// })\r\n\r\n\r\nfrappe.ui.form.on('Leave Application',  {\r\n    employee : function(frm) {\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: 'Leave Application',\r\n                filters: {\r\n                    employee: cur_frm.doc.employee, // Replace with the selected employee's ID or use cur_frm.doc.employee\r\n                    status: 'Approved'\r\n                },\r\n                fields: ['from_date', 'to_date', 'total_leave_days'],\r\n                order_by: 'modified desc', // Sort by modified field in descending order\r\n                limit: 1 // Limit to 1 record (the last leave)\r\n            },\r\n            callback: function(r) { \r\n\r\n            if (r.message && r.message[0]) {\r\n                    var lastLeave = r.message[0];\r\n                    console.log(lastLeave);\r\n                    frm.doc.excel_last_leave_start_date = lastLeave.from_date;\r\n                    frm.doc.excel_last_leave_end_date = lastLeave.to_date;\r\n                    frm.doc.excel_last_total_leave_days = lastLeave.total_leave_days;\r\n                    frm.refresh_fields(); // Refresh the form fields\r\n                }\r\n            }\r\n        });\r\n    } \r\n});\r\n\r\n\r\n\r\n\r\n// last leave automation \r\n\r\n\r\n\r\n// frappe.ui.form.on('Leave Application',  {\r\n//     refresh : function(frm) {\r\n//         frappe.call({\r\n//             method: \"frappe.client.get_value\",\r\n//             args: {\r\n//                 'doctype': 'Leave Application',\r\n//                 'filters': {'employee' : cur_frm.doc.employee, \"status\": 'Approved'},\r\n//                 'fieldname': [\r\n//                     'from_date',\r\n//                     'to_date',\r\n//                     'total_leave_days',\r\n//                     // 'image'\r\n//                 ],\r\n//                 'order': ['desc']\r\n//             },\r\n//             callback: function(r) { \r\n        \r\n//             console.log(r.message);\r\n                \r\n//              frm.doc.excel_last_leave_start_date = r.message.from_date;\r\n//              frm.refresh_field(\"excel_last_leave_start_date\");\r\n             \r\n//              frm.doc.excel_last_leave_end_date = r.message.to_date;\r\n//              frm.refresh_field(\"excel_last_leave_end_date\");\r\n             \r\n//              frm.doc.excel_last_total_leave_days = r.message.total_leave_days;\r\n//              frm.refresh_field(\"excel_last_total_leave_days\");\r\n              \r\n//             //  frm.doc.excel_employee_profile = \"https://hr.bazrabd.org\"+r.message.excel_employee_profile;\r\n//             //  frm.refresh_field(\"excel_employee_profile\"); \r\n//             }\r\n//         });\r\n//     } \r\n// });\r\n\r\n\r\n\r\n\r\n// frappe.ui.form.on('Leave Application',  {\r\n//     employee : function(frm) {\r\n//         frappe.call({\r\n//     method: \"frappe.client.get_value\",\r\n//     args: {\r\n//         'doctype': 'Leave Application',\r\n//         'filters': {'employee' : cur_frm.doc.employee, \"status\": 'Approved'},\r\n//         'fieldname': [\r\n//             'from_date',\r\n//             'to_date',\r\n//             'total_leave_days',\r\n//             'modified'\r\n//         ],\r\n//         'order_by': 'modified asc', // Sort by modified field in descending order\r\n//         'limit_page_length': 1\r\n//     },\r\n//     callback: function(r) { \r\n//         console.log(r.message);\r\n\r\n//         frm.doc.excel_last_leave_start_date = r.message.from_date;\r\n//         frm.refresh_field(\"excel_last_leave_start_date\");\r\n\r\n//         frm.doc.excel_last_leave_end_date = r.message.to_date;\r\n//         frm.refresh_field(\"excel_last_leave_end_date\");\r\n\r\n//         frm.doc.excel_last_total_leave_days = r.message.total_leave_days;\r\n//         frm.refresh_field(\"excel_last_total_leave_days\");\r\n              \r\n//             //  frm.doc.excel_employee_profile = \"https://hr.bazrabd.org\"+r.message.excel_employee_profile;\r\n//             //  frm.refresh_field(\"excel_employee_profile\"); \r\n//             }\r\n//         });\r\n//     } \r\n// });\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Leave Application', {\r\n\trefresh: function(frm) {\r\n\t\tconst employeeMail=frappe.session.user\r\n\t\tif(employeeMail== frm.doc.excel_line_manager_one){\r\n\t\t    if((frm.doc.excel_line_manager_one==frm.doc.excel_head_of_department)&&(frm.doc.workflow_state==\"Approved by Line Manager One\" || frm.doc.workflow_state==\"Rejected by Line Manager One\"))\r\n\t\t    {\r\n\t\t         msgprint('You have one more Approval request as <b>Head Of Department</b>. Please Confirm the Action');\r\n\t\t    } \r\n\t\t  }\r\n\t\t  if(employeeMail== frm.doc.excel_line_manager_two){\r\n\t\t    if((frm.doc.excel_line_manager_two==frm.doc.excel_head_of_department)&&(frm.doc.workflow_state==\"Approved by Line Manager Two\" || frm.doc.workflow_state==\"Rejected by Line Manager Two\"))\r\n\t\t    {\r\n\t\t         msgprint('You have one more Approval request as <b>Head Of Department</b>. Please Confirm the Action');\r\n\t\t    } \r\n\t\t  }\r\n\t}\r\n})\r\nfrappe.ui.form.on('Leave Application', {\r\n    make_dashboard: function(frm) {\r\n    let leave_details;\r\n    let lwps;\r\n\r\n    if (frm.doc.employee) {\r\n        frappe.call({\r\n            method: \"hrms.hr.doctype.leave_application.leave_application.get_leave_details\",\r\n            async: false,\r\n            args: {\r\n                employee: frm.doc.employee,\r\n                date: frm.doc.from_date || frm.doc.posting_date\r\n            },\r\n            callback: function(r) {\r\n                if (!r.exc && r.message[\"leave_allocation\"]) {\r\n                    leave_details = r.message[\"leave_allocation\"];\r\n                     console.log(leave_details)\r\n                }\r\n                if (!r.exc && r.message[\"leave_approver\"]) {\r\n                    frm.set_value(\"leave_approver\", r.message[\"leave_approver\"]);\r\n                }\r\n                lwps = r.message[\"lwps\"];\r\n            }\r\n        });\r\n\r\n        // Set Total Allocated Leaves and Available Leaves to 0 for Special Leave\r\n        const specialLeaveType = \"Special Leave\";\r\n        if (leave_details && leave_details[specialLeaveType]) {\r\n            leave_details[specialLeaveType][\"total_leaves\"] = 0;\r\n            leave_details[specialLeaveType][\"remaining_leaves\"] = 0;\r\n        }\r\n\r\n        $(\"div\").remove(\".form-dashboard-section.custom\");\r\n\r\n        frm.dashboard.add_section(\r\n            frappe.render_template(\"leave_application_dashboard\", {\r\n                data: leave_details\r\n            }),\r\n            __(\"Allocated Leaves\")\r\n        );\r\n        frm.dashboard.show();\r\n\r\n        let allowed_leave_types = Object.keys(leave_details);\r\n        // lwps should be allowed for selection as they don't have any allocation\r\n        allowed_leave_types = allowed_leave_types.concat(lwps);\r\n\r\n        frm.set_query(\"leave_type\", function() {\r\n            return {\r\n                filters: [\r\n                    [\"leave_type_name\", \"in\", allowed_leave_types]\r\n                ]\r\n            };\r\n        });\r\n    }\r\n},\r\n\r\n\r\n})\r\nfrappe.ui.form.on('Leave Application', {\r\n    refresh: function(frm) {\r\n      frm.set_df_property('leave_type', 'read_only', frm.is_new() ? 0 : 1);\r\n        frm.set_df_property('excel_leave_category', 'read_only', frm.is_new() ? 0 : 1);\r\n          frm.set_df_property('from_date', 'read_only', frm.is_new() ? 0 : 1);  \r\n            frm.set_df_property('to_date', 'read_only', frm.is_new() ? 0 : 1);\r\n    }\r\n        \r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2023-11-21 10:38:36.607392",
  "module": null,
  "name": "Custom Script for Leave Allocation",
  "script": "frappe.ui.form.on('Leave Allocation',  {\r\n    leave_type: function(frm) {\r\n         const leave_type = cur_frm.doc.leave_type;\r\n         if (leave_type != 'Annual Leave' && leave_type != 'Monthly Paid Leave' && leave_type != 'Maternity Leave' && leave_type != 'Special Leave'){\r\n            msgprint('Select a valid Leave Type');\r\n            frm.doc.employee = '';\r\n            frm.refresh_field(\"employee\");\r\n            frm.doc.leave_type = '';\r\n            frm.refresh_field(\"leave_type\");\r\n            validated = false;\r\n            frm.refresh()\r\n      }\r\n    }\r\n});\r\n\r\n\r\n\r\nfrappe.ui.form.on('Leave Allocation',  {\r\n  employee : function(frm) {\r\n      \r\n      const leave_type = cur_frm.doc.leave_type;\r\n      \r\n      let total_allocated_leave = 0;\r\n      \r\n      \r\n      const today = new Date();\r\n      const day = String(today.getDate()).padStart(2, '0');\r\n      const month = String(today.getMonth() + 1).padStart(2, '0'); \r\n      const year = today.getFullYear();\r\n      \r\n      const firstDayOfYear = new Date(year, 0, 1);\r\n      const this_year_day = String(firstDayOfYear.getDate()).padStart(2, '0');\r\n      const this_year_month = String(firstDayOfYear.getMonth() + 1).padStart(2, '0');\r\n\r\n      \r\n      const today_date = `${day}-${month}-${year}`;\r\n      const this_year = `${year}-${this_year_month}-${this_year_day}`;\r\n      \r\n      \r\n      if (leave_type === undefined || leave_type === '' ){\r\n            msgprint('Select the Leave Type');\r\n            frm.doc.employee = '';\r\n            frm.refresh_field(\"employee\");\r\n            validated = false;\r\n      }\r\n      else {\r\n          \r\n    frappe.call({\r\n    method: \"frappe.client.get_value\",\r\n    args: {\r\n        'doctype': 'Leave Type',\r\n        'filters': {'leave_type_name' : leave_type },\r\n        'fieldname': [\r\n            'max_leaves_allowed',\r\n            ],\r\n        },\r\n    callback: function(r) {\r\n        total_allocated_leave = r.message.max_leaves_allowed;\r\n        }\r\n    });\r\n    \r\n    \r\n    frappe.call({\r\n        method: \"frappe.client.get_value\",\r\n        args: {\r\n            'doctype': 'Employee',\r\n            'filters': {'employee_number' : cur_frm.doc.employee},\r\n            'fieldname': [\r\n                'date_of_joining',\r\n                    ]\r\n                },\r\n                \r\n        callback: function(r) { \r\n            \r\n            let date_of_joining = r.message.date_of_joining;\r\n            if (leave_type === 'Annual Leave'){\r\n\r\n                if (date_of_joining < this_year){\r\n                \r\n                    frm.doc.from_date = this_year;\r\n                    frm.refresh_field(\"from_date\");\r\n                    \r\n                    frm.doc.new_leaves_allocated = total_allocated_leave;\r\n                    frm.refresh_field(\"new_leaves_allocated\");\r\n                    \r\n                    frm.doc.total_leaves_allocated = total_allocated_leave;\r\n                    frm.refresh_field(\"total_leaves_allocated\");\r\n    \r\n                }\r\n                else\r\n                {\r\n                    \r\n                    frm.doc.from_date = date_of_joining;\r\n                    frm.refresh_field(\"from_date\");\r\n                    \r\n                    const joining_month = new Date(date_of_joining).getMonth() + 1;\r\n                    const leave_allocation = Math.round((total_allocated_leave / 12) * (12 - joining_month)) + 1;\r\n                    \r\n                    frm.doc.new_leaves_allocated = leave_allocation;\r\n                    frm.refresh_field(\"new_leaves_allocated\");\r\n                    \r\n                    frm.doc.total_leaves_allocated = leave_allocation;\r\n                    frm.refresh_field(\"total_leaves_allocated\");\r\n                }\r\n\r\n            }else if (leave_type === 'Monthly Paid Leave'){\r\n\r\n                if (date_of_joining < this_year){\r\n                \r\n                    frm.doc.from_date = this_year;\r\n                    frm.refresh_field(\"from_date\");\r\n                    \r\n                    frm.doc.new_leaves_allocated = total_allocated_leave;\r\n                    frm.refresh_field(\"new_leaves_allocated\");\r\n                    \r\n                    frm.doc.total_leaves_allocated = total_allocated_leave;\r\n                    frm.refresh_field(\"total_leaves_allocated\");\r\n    \r\n                }\r\n                else\r\n                {\r\n                    \r\n                    frm.doc.from_date = date_of_joining;\r\n                    frm.refresh_field(\"from_date\");\r\n                    \r\n                    const joining_month = new Date(date_of_joining).getMonth() + 1;\r\n                    console.log(\"joining month : \",joining_month);\r\n                    const leave_allocation = 12 - joining_month;\r\n                    \r\n                    frm.doc.new_leaves_allocated = leave_allocation;\r\n                    frm.refresh_field(\"new_leaves_allocated\");\r\n                    \r\n                    frm.doc.total_leaves_allocated = leave_allocation;\r\n                    frm.refresh_field(\"total_leaves_allocated\");\r\n                }\r\n    \r\n            }\r\n            \r\n            \r\n        }\r\n    });\r\n\r\n        frm.doc.to_date = new Date(year, 11, 31);\r\n        frm.refresh_field(\"to_date\");\r\n        \r\n      }\r\n  } \r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2023-12-24 18:37:43.022997",
  "module": null,
  "name": "Client Script for Customer",
  "script": "frappe.ui.form.on('Customer', {\r\n    refresh: function(frm) {\r\n        // Check if the 'sales_person' field is set\r\n       console.log(frm)\r\n        if (frm.doc.sales_team) {\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Sales Person',\r\n                    filters: { sales_person_name: frm.doc.sales_team[0].sales_person },\r\n                    fieldname: 'excel_sales_person_email'\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        const email = response.message.excel_sales_person_email;\r\n                        frm.set_value('excel_sales_person_email', email);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Customer', {\r\n    refresh: function(frm) {\r\n        const name=frm.doc.sales_team[0].sales_person;\r\n        frm.set_value(\"excel_sales_person\",name)\r\n      \r\n       \r\n    }\r\n}); ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Excel Credit Limit Enhancement Form",
  "enabled": 1,
  "modified": "2023-12-06 13:43:03.959768",
  "module": null,
  "name": "Excel CLE Script",
  "script": "frappe.ui.form.on('Excel Credit Limit Enhancement Form', {\n    last_year_turn_over: function (frm) {\n        var d = flt(frm.doc.last_year_turn_over);\n        var e = flt(12);\n        var f = d / e;\n        frm.set_value( \"average_monthly_sales\", f); \n        frm.refresh_field(\"average_monthly_sales\"); \n    }\n});\n\nfrappe.ui.form.on('Excel Credit Limit Enhancement Form', {\n    refresh: function(frm) {\n        if (frappe.user.has_role('Excel Credit User')) {\n          $('.form-attachments').hide(); \n            const timelineElements = document.getElementsByClassName('new-timeline');\n        for (var i = 0; i < timelineElements.length; i++) {\n            timelineElements[i].style.display = 'none';\n        }\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Excel Credit Limit Enhancement Form', {\n    refresh: function(frm) {\n      frm.set_df_property('type_of_new_credit_limit', 'read_only', frm.is_new() ? 0 : 1);\n        frm.set_df_property('proposed_credit_limit_amount', 'read_only', frm.is_new() ? 0 : 1);\n         frm.set_df_property('adjustment_date', 'read_only', frm.is_new() ? 0 : 1);  \n            frm.set_df_property('customer', 'read_only', frm.is_new() ? 0 : 1);\n             frm.set_df_property('current_credit_limit', 'read_only', frm.is_new() ? 0 : 1);\n              frm.set_df_property('current_year_sales', 'read_only', frm.is_new() ? 0 : 1);\n               frm.set_df_property('last_month_sales', 'read_only', frm.is_new() ? 0 : 1);\n                frm.set_df_property('excel_current_year_collection', 'read_only', frm.is_new() ? 0 : 1);\n                 frm.set_df_property('current_outstanding', 'read_only', frm.is_new() ? 0 : 1);\n                  frm.set_df_property('cheque_in_hand_amount', 'read_only', frm.is_new() ? 0 : 1);\n                   frm.set_df_property('interested_brand', 'read_only', frm.is_new() ? 0 : 1);\n                    frm.set_df_property('last_year_turn_over', 'read_only', frm.is_new() ? 0 : 1);\n                     frm.set_df_property('excel_last_year_collection', 'read_only', frm.is_new() ? 0 : 1);\n                      frm.set_df_property('remarks', 'read_only', frm.is_new() ? 0 : 1);\n            \n    \n    }\n        \n});\n\nfrappe.ui.form.on('Excel Credit Limit Enhancement Form', {\n    excel_current_year_collection: function (frm) {\n        var d = flt(frm.doc.excel_current_year_collection);\n        var currentDate = new Date();\n        var currentMonth = currentDate.getMonth();\n        var lastMonthCount = currentMonth;\n        // console.log (currentMonth)\n        var f = d / lastMonthCount;\n        frm.set_value(\"excel_average_monthly_collection_current_year\", f);\n        frm.refresh_field(\"excel_average_monthly_collection_current_year\");\n    }\n});\n\nfrappe.ui.form.on('Excel Credit Limit Enhancement Form', {\n    excel_last_year_collection: function (frm) {\n        var d = flt(frm.doc.excel_last_year_collection);\n        var e = flt(12);\n        var f = d / e;\n        frm.set_value( \"excel_average_monthly_collection_last_year\", f); \n        frm.refresh_field(\"excel_average_monthly_collection_last_year\"); \n    }\n});\n\nfrappe.ui.form.on('Excel Credit Limit Enhancement Form', {\n\trefresh:function(frm) {\n\t\tfrm.toggle_reqd(\"excel_cm_remarks\",frappe.user.has_role('Excel Team CM'))\n\t}\n})\n\nfrappe.ui.form.on('Excel Credit Limit Enhancement Form', {\n    current_year_sales: function (frm) {\n        var d = flt(frm.doc.current_year_sales);\n        var currentDate = new Date();\n        var currentMonth = currentDate.getMonth();\n        var lastMonthCount = currentMonth;\n        // console.log (currentMonth)\n        var f = d / lastMonthCount;\n        frm.set_value(\"average_monthly_sales_current_year\", f);\n        frm.refresh_field(\"average_monthly_sales_current_year\");\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Advance",
  "enabled": 0,
  "modified": "2023-12-31 16:14:07.631497",
  "module": null,
  "name": "IoU - Employee Advance",
  "script": "//set only once \n\nfrappe.ui.form.on(\"Employee Advance\", \"refresh\", function(frm) {\n    // use the is_new method of frm, to check if the doc is saved or not\n    frm.set_df_property(\"excel_employee_request_amount\", \"read_only\", frm.is_new() ? 0 : 1);\n});\n\nfrappe.ui.form.on(\"Employee Advance\", \"refresh\", function(frm) {\n    // use the is_new method of frm, to check if the doc is saved or not\n    frm.set_df_property(\"excel_iou_type\", \"read_only\", frm.is_new() ? 0 : 1);\n});\n\n// update reached limit \n\n\nfrappe.ui.form.on('Employee Advance',  {\n    refresh : function(frm) {\n        frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                'doctype': 'Excel IoU Project',\n                'filters': {'name' :  cur_frm.doc.excel_iou_project},\n                'fieldname': [\n                    'reached_credit_limit'\n                ]\n            },\n            callback: function(r) {\n                console.log(r.message.reached_credit_limit)\n             frm.doc.excel_updated_reached_credit_limit = r.message.reached_credit_limit;\n             frm.refresh_field(\"excel_updated_reached_credit_limit\")\n            // sohan\n            console.log( frm.doc.excel_updated_reached_credit_limit)\n              \n            }\n        });\n    } \n});\n\n\n// User level validation\nfrappe.ui.form.on('Employee Advance',  {\n    excel_employee_request_amount : function(frm) {\n\n        frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                'doctype': 'Excel IoU Project',\n                'filters': {'name' :  cur_frm.doc.excel_iou_project},\n                'fieldname': [\n                    'reached_credit_limit'\n                ]\n            },\n            callback: function(r) { \n             frm.doc.excel_updated_reached_credit_limit = r.message.reached_credit_limit;\n             frm.refresh_field(\"excel_updated_reached_credit_limit\");\n              \n            }\n        });\n\n      frm.doc.advance_amount = frm.doc.excel_employee_request_amount;\n      refresh_field('advance_amount');  \n\n      if(frm.doc.excel_iou_project_limit < (frm.doc.excel_employee_request_amount + frm.doc.excel_project_reached_credit_limit) ){\n          msgprint(\"Remaining Credit Reached\"); \n          validated = false;\n\n          frm.doc.excel_employee_request_amount = 0;\n          refresh_field('excel_employee_request_amount');   \n          \n          frm.doc.advance_amount = frm.doc.excel_employee_request_amount;\n          refresh_field('advance_amount');  \n      }\n    } \n});\n\n// Approver level validation\n\n\nfrappe.ui.form.on('Employee Advance',  {\n    excel_approved_amount : function(frm) {\n    \n            frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                'doctype': 'Excel IoU Project',\n                'filters': {'name' :  cur_frm.doc.excel_iou_project},\n                'fieldname': [\n                    'reached_credit_limit'\n                ]\n            },\n            callback: function(r) { \n             frm.doc.excel_updated_reached_credit_limit = r.message.reached_credit_limit;\n             frm.refresh_field(\"excel_updated_reached_credit_limit\");\n              \n            }\n        });\n\n        frm.doc.advance_amount = frm.doc.excel_approved_amount;\n        refresh_field('advance_amount'); \n\n      if(frm.doc.excel_iou_project_limit < (frm.doc.excel_approved_amount + frm.doc.excel_updated_reached_credit_limit) ){\n          msgprint(\"Remaining Credit Reached\"); \n          validated = false;\n\n          frm.doc.excel_approved_amount = 0;\n          refresh_field('excel_approved_amount');    \n\n          frm.doc.advance_amount = frm.doc.excel_approved_amount;\n          refresh_field('advance_amount'); \n      }    \n    }\n        \n})\n\n\n\nfrappe.ui.form.on('Employee Advance',  {\n    validate : function(frm) {\n        \n        if (frm.doc.excel_approved_amount > 0){\n            \n            frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                'doctype': 'Excel IoU Project',\n                'filters': {'name' :  cur_frm.doc.excel_iou_project},\n                'fieldname': [\n                    'reached_credit_limit'\n                ]\n            },\n            callback: function(r) { \n             frm.doc.excel_updated_reached_credit_limit = r.message.reached_credit_limit;\n             frm.refresh_field(\"excel_updated_reached_credit_limit\");\n              \n            }\n        });\n\n        frm.doc.advance_amount = frm.doc.excel_approved_amount;\n        refresh_field('advance_amount'); \n\n      if(frm.doc.excel_iou_project_limit < (frm.doc.excel_approved_amount + frm.doc.excel_updated_reached_credit_limit) ){\n          msgprint(\"Remaining Credit Reached\"); \n          validated = false;\n\n          frm.doc.excel_approved_amount = 0;\n          refresh_field('excel_approved_amount');    \n\n          frm.doc.advance_amount = frm.doc.excel_approved_amount;\n          refresh_field('advance_amount'); \n      }\n      else{\n          console.log(\"update amount  \"+frm.doc.excel_updated_reached_credit_limit + frm.doc.docstatus)\n        frappe.call({\n\t\t\t\"method\": \"frappe.client.set_value\", \n\t\t\t\"args\": {\n\t\t\t\t\"doctype\": \"Excel IoU Project\",\n\t\t\t\t\"name\": frm.doc.excel_iou_project,\n\t\t\t\t\"fieldname\": {\n\t\t\t\t\t\"reached_credit_limit\": frm.doc.excel_approved_amount + frm.doc.excel_updated_reached_credit_limit\n\t\t\t\t},\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n       \n      }\n\n            \n            \n}\n   } \n});\n\n\n// cancelation \n\nfrappe.ui.form.on('Employee Advance',  {\n    before_cancel : function(frm) {\n        frappe.call({\n\t\t\t\"method\": \"frappe.client.set_value\", \n\t\t\t\"args\": {\n\t\t\t\t\"doctype\": \"Excel IoU Project\",\n\t\t\t\t\"name\": frm.doc.excel_iou_project,\n\t\t\t\t\"fieldname\": {\n\t\t\t\t\t\"reached_credit_limit\": frm.doc.excel_updated_reached_credit_limit - frm.doc.advance_amount,\n\t\t\t\t\t\"incoming_iou_name\": frm.doc.name\n\t\t\t\t},\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n    } \n});\n\nfrappe.ui.form.on('Employee Advance', {\n\trefresh:function(frm) {\n\t\tfrm.toggle_reqd(\"excel_approved_amount\",frappe.user.has_role('Excel Project Auditor'))\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Excel IoU Project",
  "enabled": 0,
  "modified": "2023-12-31 16:15:11.229647",
  "module": null,
  "name": "Excel IoU Project Script",
  "script": "function update_limit(frm) {\n    \n    frm.save();  \n}\n\nfrappe.ui.form.on(\"IoU Project\", \"reached_credit_limit\", update_limit);",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-05-06 15:13:40.270771",
  "module": null,
  "name": "Employee - Script",
  "script": "\nfrappe.ui.form.on('Employee', {\n    excel_parent_department: function(frm) {\n        const department = frm.doc.excel_parent_department;\n\n        frm.set_query(\"excel_hr_section\", function() {\n            return {\n                filters: {\n                    parent_department: department\n                }\n            };\n        });\n    },\n    excel_hr_section: function(frm) {\n        const department = frm.doc.excel_hr_section;\n\n        frm.set_query(\"excel_hr_sub_section\", function() {\n            return {\n                filters: {\n                    parent_department: department\n                }\n            };\n        });\n    }\n});\n\nfrappe.ui.form.on('Employee', {\n    validate: function(frm){\n        let department=\"\";\n        if(frm.doc.excel_parent_department){\n            if(frm.doc.excel_hr_section){\n                if(frm.doc.excel_hr_sub_section){\n                    department=frm.doc.excel_hr_sub_section\n                }else{\n                    department=frm.doc.excel_hr_section \n                }\n            }else{\n                department=frm.doc.excel_parent_department\n            }\n        }\n        frm.set_value(\"department\",department)\n       frm.refresh_field('department');\n    //   frm.save()\n     \n    }\n    \n});\n\nfrappe.ui.form.on('Employee', {\n\tbefore_save:function(frm) {\n\t\tconst id=frm.doc.employee_number\n\t\tconst getdeviceId=extractNumberFromId(id)\n\t\tfrm.set_value('attandance_device_id',getdeviceId)\n\t}\n})\n\nfunction extractNumberFromId(identifier) {\n    if (identifier.startsWith(\"ETL\") || identifier.startsWith(\"EISL\")) {\n        var number = identifier.replace(/\\D/g, ''); // Remove non-digit characters\n        return number;\n    } else {\n        return identifier;\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Excel Family Day 2024",
  "enabled": 1,
  "modified": "2024-01-22 13:42:11.754276",
  "module": null,
  "name": "Excel Family Day - Script",
  "script": "frappe.ui.form.on('Excel Family Day 2024', {\n\temployee_id: function(frm) {\n\t\tconst user = frappe.session.user\n\t\tfrappe.call({\n\t\t\tmethod: 'frappe.client.get_value',\n\t\t\targs: {\n\t\t\t\t'doctype': 'Employee',\n\t\t\t\t'filters': {\n\t\t\t\t\t'name': frm.doc.employee_id\n\t\t\t\t},\n\t\t\t\t'fieldname': [\n\t\t\t\t\t\"employee_name\", \"company_email\", \"gender\", \"marital_status\", \"name\"\n\t\t\t\t]\n\t\t\t},\n\t\t\tcallback: function(r) {\n\n\t\t\t\tif (r) {\n\t\t\t\t\tconst data = r.message\n\t\t\t\t\tfrm.set_value(\"full_name\", data.employee_name)\n\t\t\t\t\tfrm.set_value(\"email\", data.company_email)\n\t\t\t\t\tfrm.set_value(\"marital_status\", data.marital_status)\n\t\t\t\t\tfrm.set_value(\"gender\", data.gender)\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n})\n\nfrappe.ui.form.on('Excel Family Day 2024', {\n\tnumber_of_children: function(frm) {\n\n\t\t//   frm.fields_dict.existing_meetings.grid.remove_all();\n\t\t// use the __islocal value of doc,  to check if the doc is saved or not\n\t\tfor (let i = 0; i < frm.doc.number_of_children; i++) {\n\t\t\tfrm.fields_dict.childrens.grid.add_new_row();\n\t\t}\n\t}\n});\n\n\n\nfrappe.ui.form.on('Excel Family Day 2024',  {\n    validate : function(frm) {\n       \n        let totalPerson = 1;\n        \n        if(cur_frm.doc.spouse_is_attending === 'Yes'){\n            totalPerson += 1;\n        }\n        if(cur_frm.doc.do_you_have_children === \"Yes\"){\n            totalPerson += Number(cur_frm.doc.number_of_children);\n        }\n        \n        frm.doc.confirmation_fee = totalPerson * 500;\n        frm.refresh_field(\"confirmation_fee\");\n        \n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Attendance Request",
  "enabled": 1,
  "modified": "2024-12-11 15:58:02.798547",
  "module": null,
  "name": "Attendance Request Script",
  "script": "\nfrappe.ui.form.on('Attendance Request', {\n    refresh:function (frm){\n        console.log(frm.is_new())\n       frm.set_df_property('from_date', 'read_only', frm.is_new() ? 0:1);\n        frm.set_df_property('to_date', 'read_only', frm.is_new() ? 0:1);\n         frm.set_df_property('excel_criteria_of_reason', 'read_only', frm.is_new() ? 0:1);\n          frm.set_df_property('reason', 'read_only', frm.is_new() ? 0:1);\n          frm.set_df_property('explanation', 'read_only', frm.is_new() ? 0:1);\n          frm.set_df_property('employee', 'read_only', frm.is_new() ? 0:1);\n        \n    },\n    excel_criteria_of_reason: function (frm) {\n        const employee = frm.doc.employee;\n       \n        const fromDate=frm.doc.from_date;\n        const toDate=frm.doc.to_date\n        const criteria=frm.doc.excel_criteria_of_reason\n  \n        if(criteria==\"Off Day Duty\"){\n            if(!employee || !fromDate || !toDate){\n                frm.set_value(\"excel_criteria_of_reason\",\"\")\n                frm.refresh_field('excel_criteria_of_reason');\n                frappe.msgprint(\"Enter Required Value\")\n                \n                return\n            }\n            frappe.db.get_value('Employee', employee, 'holiday_list')\n            .then(response => {\n                const holiday = response.message.holiday_list;\n\n                frappe.call({\n                    method:\"excel_hr.api.get_holiday_list\",\n                    args:{parent:holiday},\n                    callback:function(r){\n                    const result=r.message\n                    const allHolidays=result\n                    console.log(allHolidays)\n                    const inputDays=generateDates(fromDate,toDate)\n                      console.log(allHolidays)\n                    const isMatch=matchHoliday(allHolidays,inputDays,\"holiday_date\")\n                    console.log(isMatch)\n                    if(!isMatch){\n                        console.log(\"not matched\")\n                       \n                        frm.set_value(\"excel_criteria_of_reason\",\"\")\n                        frm.set_value(\"from_date\",\"\")\n                        frm.set_value(\"to_date\",\"\")\n                        frm.refresh_field('excel_criteria_of_reason');\n                        frm.refresh_field('from_date');\n                        frm.refresh_field('to_date');\n                        frappe.msgprint(\"Holiday Not Matched\")\n                        \n                       \n                    }else{\n                        console.log(\"matching\")\n                    }\n                       \n                    }\n                })\n               \n\n            })\n            .catch(err => {\n                console.error(err);\n            });\n        }else{return}\n       \n       \n    }\n});\n\n\nfunction generateDates(startDate, endDate) {\n    const dateList = [];\n    let currentDate = new Date(startDate);\n\n    while (currentDate <= new Date(endDate)) {\n        dateList.push(currentDate.toISOString().split('T')[0]); // Format as 'YYYY-MM-DD'\n        currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    return dateList;\n}\n\n\n\nfunction matchHoliday(bigArray, smallArray, propertyName) {\n    return smallArray.every(value =>\n        bigArray.some(obj => obj[propertyName] === value)\n    );\n}\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2024-05-06 15:14:14.040101",
  "module": null,
  "name": "Employee Script",
  "script": "frappe.ui.form.on('Employee', {\n\tbefore_save:function(frm) {\n\t\tconst id=frm.doc.employee_number\n\t\tconst getdeviceId=extractNumberFromId(id)\n\t\tfrm.set_value('attandance_device_id',getdeviceId)\n\t}\n})\n\nfunction extractNumberFromId(identifier) {\n    if (identifier.startsWith(\"ETL\") || identifier.startsWith(\"EISL\")) {\n        var number = identifier.replace(/\\D/g, ''); // Remove non-digit characters\n        return number;\n    } else {\n        return identifier;\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Checkin",
  "enabled": 1,
  "modified": "2024-10-30 21:30:38.217808",
  "module": null,
  "name": "Employee Checkin Script",
  "script": "frappe.ui.form.on('Employee Checkin', {\n  onload: function (frm) {\n    if (frm.is_new()) {\n      const date = getDateFromDateTimestring(frm.doc.time);\n      frm.set_value('date', date);\n\n      // Retrieve location data if necessary fields are empty\n      if (!frm.doc.latitude || !frm.doc.longitude || !frm.doc.location) {\n        checkLocationPermission().then(permission => {\n          if (permission) {\n            navigator.geolocation.getCurrentPosition(\n              function (position) {\n                const latitude = position.coords.latitude;\n                const longitude = position.coords.longitude;\n                const geoJSONString =\n                  '{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Point\",\"coordinates\":[0,0]}}]}';\n                const geoJSONObject = JSON.parse(geoJSONString);\n                geoJSONObject.features[0].geometry.coordinates = [\n                  longitude,\n                  latitude,\n                ];\n                const locationData = JSON.stringify(geoJSONObject);\n\n                // Set latitude, longitude, and location fields\n                frm.set_value('latitude', latitude);\n                frm.set_value('longitude', longitude);\n                frm.set_value('location', locationData);\n                frm.set_value('device_id', 'set_local');\n\n                getAddressFromCoordinates(latitude, longitude)\n                  .then(function (address) {\n                    frm.set_value('address', address);\n                    frm.set_df_property('address', 'read_only');\n                    frm.refresh_field('address');\n                  })\n                  .catch(function (error) {\n                    frappe.msgprint(\n                      __('Error getting address: {0}', [error.message]),\n                    );\n                  });\n              },\n              function (error) {\n                frm.set_value('device_id', 'not set');\n\n                frappe.msgprint(__('Please enable location permission'));\n              },\n            );\n          } else {\n            frm.set_value('device_id', 'not set');\n            frappe.msgprint(__('Please enable location permission'));\n          }\n        });\n      }\n    }\n  },\n  before_save: function (frm) {\n    if (frm.is_new() && frm.doc.employee) {\n      const date = getDateFromDateTimestring(frm.doc.time);\n      frm.set_value('date', date);\n\n      // Retrieve location data if necessary fields are empty\n      checkLocationPermission().then(permission => {\n        if (permission) {\n          navigator.geolocation.getCurrentPosition(\n            function (position) {\n              const latitude = position.coords.latitude;\n              const longitude = position.coords.longitude;\n              const geoJSONString =\n                '{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Point\",\"coordinates\":[0,0]}}]}';\n              const geoJSONObject = JSON.parse(geoJSONString);\n              geoJSONObject.features[0].geometry.coordinates = [\n                longitude,\n                latitude,\n              ];\n              const locationData = JSON.stringify(geoJSONObject);\n\n              // Set latitude, longitude, and location fields\n\n              getAddressFromCoordinates(latitude, longitude)\n                .then(function (address) {\n                  frm.set_value('latitude', latitude);\n                  frm.set_value('longitude', longitude);\n                  frm.set_value('location', locationData);\n                  frm.set_value('device_id', 'set_local');\n                  frm.set_value('address', address);\n                  frm.save();\n                })\n                .catch(function (error) {\n                  frappe.msgprint(\n                    __('Error getting address: {0}', [error.message]),\n                  );\n                });\n            },\n            function (error) {\n              frm.set_value('device_id', 'not set');\n              frappe.msgprint(__('Please enable location permission'));\n            },\n          );\n        } else {\n          frm.set_value('device_id', 'not set');\n          frappe.msgprint(__('Please enable location permission'));\n        }\n      });\n    }\n  },\n  refresh: function (frm) {\n    const isNew = frm.is_new();\n\n    frm.set_df_property('employee', 'read_only', !isNew);\n    frm.set_df_property('log_type', 'read_only', !isNew);\n    frm.set_df_property('address', 'read_only', !isNew);\n    frm.set_df_property('time', 'read_only', !isNew);\n    frm.set_df_property('latitude', 'read_only', !isNew);\n    frm.set_df_property('longitude', 'read_only', !isNew);\n  },\n  latitude: function (frm) {\n    regenerateAddress(frm);\n  },\n  longitude: function (frm) {\n    regenerateAddress(frm);\n  },\n});\n\nfunction getDateFromDateTimestring(dateTimeString) {\n  const [datePart] = dateTimeString?.split(' ');\n  return datePart;\n}\n\nfunction getAddressFromCoordinates(latitude, longitude) {\n  return new Promise(function (resolve, reject) {\n    const url = `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`;\n\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        const address = data.display_name;\n        resolve(address);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n}\n\nfunction checkLocationPermission() {\n  return new Promise(resolve => {\n    navigator.permissions.query({name: 'geolocation'}).then(result => {\n      if (result.state === 'granted') {\n        resolve(true);\n      } else if (result.state === 'prompt') {\n        navigator.geolocation.getCurrentPosition(\n          function () {\n            resolve(true);\n          },\n          function () {\n            resolve(false);\n          },\n        );\n      } else {\n        resolve(false);\n      }\n    });\n  });\n}\n\nfunction regenerateAddress(frm) {\n  const latitude = frm.doc.latitude;\n  const longitude = frm.doc.longitude;\n\n  if (latitude && longitude) {\n    getAddressFromCoordinates(latitude, longitude)\n      .then(function (address) {\n        frm.set_value('address', address);\n      })\n      .catch(function (error) {\n        frappe.msgprint(__('Error getting address: {0}', [error.message]));\n      });\n  }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting Room Booking",
  "enabled": 1,
  "modified": "2025-05-17 21:46:59.664531",
  "module": null,
  "name": "Meeting Booking Client Script",
  "script": "frappe.ui.form.on('Meeting Room Booking', {\n    before_save: function (frm) {\n\n\n        if (frm.doc.repeat_this_meeting == \"Yes\" && (cur_frm.doc.end_date < cur_frm.doc.start_date)) {\n            frm.doc.end_date = frm.doc.start_date;\n        }\n    },\n\n    refresh: function (frm, cdt, cdn) {\n        frm.fields_dict['existing_meetings'].grid.grid_buttons.remove();\n        frm.toggle_display(\"existing_meetings\", true);\n    },\n\n    onload: function (frm, cdt, cdn) {\n        frm.get_field(\"existing_meetings\").grid.cannot_add_rows = true;\n        frm.fields_dict.existing_meetings.grid.remove_all();\n    },\n\n    meeting_room: function (frm) {\n        if(!frm.doc.excel_branch){\n            frm.doc.meeting_room = \"\"\n            frm.refresh_field(\"meeting_room\");\n             frappe.msgprint(\"First Enter Branch Name\");\n            return\n        }\n        existing_meeting(frm);\n    },\n\n    start_date: function (frm) {\n        existing_meeting(frm);\n        if (frm.doc.repeat_this_meeting === \"No\") {\n            frm.doc.end_date = frm.doc.start_date;\n            frm.refresh_field(\"end_date\");\n        }\n    },\n\n    end_date: function (frm) {\n        existing_meeting(frm);\n    },\n\n    start_time: function (frm) {\n        if (frm.doc.start_time && frm.doc.duration) {\n            console.log(\"true\");\n            const end_time = calculateEndTime(frm.doc.start_time, frm.doc.duration);\n            frm.set_value(\"end_time\", end_time);\n            frm.refresh_field(\"end_time\");\n        }\n    },\n\n    duration: function (frm) {\n        const start_time = frm.doc.start_time;\n        console.log(\"dkcedg\");\n        if (!start_time) {\n            frappe.msgprint(\"First Enter Start Time\");\n            frm.set_value(\"duration\", \"\");\n            frm.reload_doc(\"duration\");\n        } else {\n            const duration = frm.doc.duration;\n            const end_time = calculateEndTime(start_time, duration);\n            if (duration > 10 * 3600) {\n                frappe.msgprint(\"Meeting duration should not exceed 4 hours\");\n                frm.set_value(\"duration\", \"\"); // Set duration to 4 hours\n                frm.reload_doc(\"duration\");\n            } else {\n                frm.set_value(\"end_time\", end_time);\n            }\n        }\n    },\n\n    // repeat_this_meeting: function (frm) {\n    //     if (frm.doc.repeat_this_meeting == \"Yes\") {\n    //         frm.set_df_property(\"end_date\", \"read_only\", 0);\n    //         frm.set_df_property(\"end_date\", \"reqd\", 1);\n    //     } else {\n    //         frm.set_df_property(\"end_date\", \"read_only\", 1);\n    //         frm.set_df_property(\"end_date\", \"reqd\", 0);\n    //     }\n    // },\n\n    excel_branch: function (frm) {\n         existing_meeting(frm);\n        const branch = frm.doc.excel_branch;\n        const floor = frm.doc.excel_floor;\n        frm.set_query(\"meeting_room\", function () {\n            return {\n                filters: {\n                    excel_branch: branch\n                }\n            };\n        });\n    }\n});\n\nfunction calculateEndTime(startTimeStr, durationSeconds) {\n    const startTimeComponents = startTimeStr.split(\":\");\n    const startTime = new Date(0, 0, 0, startTimeComponents[0], startTimeComponents[1], startTimeComponents[2]);\n\n    const startTimeSeconds = startTime.getHours() * 3600 + startTime.getMinutes() * 60 + startTime.getSeconds();\n\n    const endTimeSeconds = startTimeSeconds + durationSeconds;\n\n    const endTimeHours = Math.floor(endTimeSeconds / 3600);\n    const endTimeMinutes = Math.floor((endTimeSeconds % 3600) / 60);\n    const endTimeSecondsRemainder = endTimeSeconds % 60;\n\n    const endTimeStr = `${String(endTimeHours).padStart(2, '0')}:${String(endTimeMinutes).padStart(2, '0')}:${String(endTimeSecondsRemainder).padStart(2, '0')}`;\n\n    return endTimeStr;\n}\n\nconst getSingleDoc = (Doctype, name, field) => {\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            'doctype': Doctype,\n            'filters': { 'name': name },\n            'fieldname': field\n        },\n        callback: function (r) {\n            if (r.message) {\n                console.log(r);\n                return r;\n            }\n        }\n    });\n}\n\nfunction existing_meeting(frm) {\n    if (frm.doc.excel_branch && frm.doc.meeting_room && frm.doc.start_date || frm.doc.end_date) {\n        const branch = frm.doc.excel_branch;\n        const meeting_room = frm.doc.meeting_room;\n        const start_date = frm.doc.start_date;\n        let end_date = frm.doc.end_date;\n        if (!end_date) {\n            end_date = start_date;\n        }\n        frm.fields_dict.existing_meetings.grid.remove_all();\n        console.log(\"working\");\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Meeting',\n                filters: [\n                    ['excel_branch', '=', branch],\n                    ['meeting_room', '=', meeting_room],\n                    ['meeting_date', '>=', start_date],\n                    ['meeting_date', '<=', end_date],\n                ],\n                fields: [\"*\"],\n            },\n            callback: e => {\n                const datas = e.message;\n                console.log(datas)\n                datas.map(data => {\n                    var credit_row = frm.fields_dict.existing_meetings.grid.add_new_row();\n                    frappe.model.set_value(credit_row.doctype, credit_row.name, \"title\", data.title);\n                    frappe.model.set_value(credit_row.doctype, credit_row.name, \"date\", data.meeting_date);\n                    frappe.model.set_value(credit_row.doctype, credit_row.name, \"start_time\", data.excel_start_time);\n                    frappe.model.set_value(credit_row.doctype, credit_row.name, \"end_time\", data.excel_end_time);\n                });\n            }\n        });\n    }\n}\n\n\n// frappe.ui.form.on('Meeting Room Booking', {\n//     refresh: function(frm) {\n//         frm.fields_dict['guests'].grid.get_field('employee').get_query = function(doc, cdt, cdn) {\n//             return {\n//                 filters: [{}]\n//             };\n//         };\n//     }\n// });\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-06-23 13:22:27.159776",
  "module": "Excel Hr",
  "name": "Employment Type Fetch",
  "script": "frappe.ui.form.on('Employee', {\n   employment_type: function(frm) {\n        if (frm.doc.employment_type) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Employment Type',\n                    name: frm.doc.employment_type\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        const custom_employment_subtypes = r.message.custom_sub_type || [];\n                        const options = custom_employment_subtypes.map(sub_type => sub_type.sub_type_name);  \n                        frm.set_df_property('custom_employment_subtype', 'options', options);\n                        console.log(\"Clinet Script is working : \",options);\n                        frm.refresh_field('custom_employment_subtype');\n                    }\n                }\n            });\n        }\n    },\n    \n    custom_district: function(frm) {\n        // When district changes\n        if (frm.doc.custom_district) {\n            // Show thana field\n            frm.toggle_display('custom_thana', true);\n            \n            // Set query for thanas under selected district\n            frm.set_query('custom_thana', () => {\n                return {\n                    filters: [\n                        ['Employee Address', 'parent_name', '=', frm.doc.custom_district],\n                    ]\n                };\n            });\n        } else {\n            // Hide and clear thana field if no district selected\n            frm.toggle_display('custom_thana', false);\n            frm.set_value('custom_thana', '');\n        }\n    },\n    \n    custom_permanent_district: function(frm) {\n        // When district changes\n        if (frm.doc.custom_permanent_district) {\n            // Show thana field\n            frm.toggle_display('custom_permanent_thana', true);\n            \n            // Set query for thanas under selected district\n            frm.set_query('custom_permanent_thana', () => {\n                return {\n                    filters: [\n                        ['Employee Address', 'parent_name', '=', frm.doc.custom_permanent_district],\n                    ]\n                };\n            });\n        } else {\n            // Hide and clear thana field if no district selected\n            frm.toggle_display('custom_permanent_thana', false);\n            frm.set_value('custom_permanent_thana', '');\n        }\n    },\n    \n    refresh: function(frm) {\n        \n        if (!frm.doc.custom_district) {\n            frm.toggle_display('custom_thana', false);\n        }\n        if (!frm.doc.custom_permanent_district) {\n            frm.toggle_display('custom_permanent_thana', false);\n        }\n        // Optional: Improve display of address names\n        frm.fields_dict.custom_district.df.get_route_options_for_new_doc = false;\n        frm.fields_dict.custom_thana.df.get_route_options_for_new_doc = false;\n        \n        frm.fields_dict.custom_permanent_district.df.get_route_options_for_new_doc = false;\n        frm.fields_dict.custom_permanent_thana.df.get_route_options_for_new_doc = false;\n    },\n    \n    \n});",
  "view": "Form"
 }
]